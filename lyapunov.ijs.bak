NB. lyapunov.ijs
NB. solve Luapunov equation
NB.
NB. TODO
NB. - replace some asserts with throw.
NB. - handle non-squared, transposed cases
NB. - implement enhanced LAPACK interfaces
NB.
NB. 2007-12-14 1.0.0 Igor Zhuravlov

require '~system/packages/math/matutil.ijs'
require '~addons/math/lapack/lapack.ijs'
require '~addons/math/lapack/dgeev.ijs'
require '~addons/math/lapack/zgeev.ijs'
require '~user/projects/dgerqf.ijs'
require '~user/projects/dpotrf.ijs'
require '~user/projects/zgees.ijs'
require '~user/projects/zgerqf.ijs'
require '~user/projects/zgesv.ijs'
require '~user/projects/zpotrf.ijs'

N2=: [: %: [: +/ [: *: |                  NB. 2-norm ||y||_2
h=: +@|:                                  NB. conjugate transpose

NB. Solve stable continuous-time Luapunov equation A*X + X*A' + B*B' = 0
NB. directly for Cholesky factor U, X = U*U'
NB.
NB. Usage:
NB.   U=. A lyapchol B
NB. where:
NB.   A - N-by-N complex or real matrix. Must be stable, i.e. all
NB.       eigenvalues of A must have negative real parts
NB.   B - N-by-M complex or real matrix
NB.   U - N-by-N real upper triangular matrix
NB.
NB. Solution must exist and be unique, i.e. for any pairs (i,j)
NB.   eigenvalue(A)[i] ~: eigenvalue(B)[j] should hold
NB.
NB. Reference:
NB.   Solution of stable continuous- or discrete-time Lyapunov equations
NB.   (Cholesky factor), URL: http://www.slicot.org/shared/doc/SB03OD.html

lyapchol=: 4 : 0
  assert. 2 = # $ x                       NB. A is table (rank-2 array)
  assert. =/ $ x                          NB. A is squared
  n=. # x
  assert. 2 = # $ y                       NB. B is table (rank-2 array)
  assert. n = # y                         NB. A and B sizes should match
  'Q R'=. zgees_jlapack_ x                NB. Schur factorization Q*R*Q'=A
  smoutput 2 3 $ 'Q' ; 'R' ; 'A-QRQ''' ; Q ; R ; (x - Q mp R mp h Q)
  evA=. (<0 1) |: R                       NB. eigenvalues(A)
  evB=. 1 {:: dgeev_jlapack_ y            NB. eigenvalues(B)
  assert. -. 0 e. 0 > 9 o. evA            NB. A is stable
  assert. -. 0 e. 0 < | evA +/ evB        NB. solution exists and is unique
  smoutput 2 2 $ 'eig(A)' ; 'eig(B)' ; (,. evA) ; (,. evB)
  R1=. 0 {:: dgerqfQ_jlapack_ y           NB. RQ factorization R1*P1=B
  NB.  smoutput 2 3 $ 'R1' ; 'P1' ; 'B-R1*P1' ; R1 ; P1 ; (y - R1 mp P1)
  R2=. 0 {:: zgerqfQ_jlapack_ (h Q) mp R1 NB. RQ factorization R2*P2=Q'*R1
  NB.  smoutput 2 5 $ 'Q''*R1' ; 'R2*P2' ; 'Q''*R1-R2*P2' ; 'R2' ; 'P2' ; ((h Q) mp R1) ; (R2 mp P2) ; (((h Q) mp R1) - (R2 mp P2)) ; R2 ; P2
  V=. R sorzhou R2                        NB. solve reduced Lyapunov equation directly for Cholesky factor V
  R3=. 0 {:: dgerqfQ_jlapack_ Q mp V      NB. RQ factorization R3*P3=Q*V
  NB.  smoutput 2 5 $ 'Q*V' ; 'R3*P3' ; 'Q*V-R3*P3' ; 'R3' ; 'P3' ; (Q mp V) ; (R3 mp P3) ; ((Q mp V) - (R3 mp P3)) ; R3 ; P3
  NB.  smoutput 2 9 $ 'Q' ; 'R' ; 'R1' ; 'P1' ; 'R2' ; 'P2' ; 'V' ; 'R3' ; 'P3' ; Q ; R ; R1 ; P1 ; R2 ; P2 ; V ; R3 ; P3
  R3=. (* (<0 1) |: R3) *"1 R3            NB. negate columns having negative diagonal elements being real
  smoutput 2 6 $ 'Q' ; 'R' ; 'R1' ; 'R2' ; 'V' ; 'R3' ; Q ; R ; R1 ; R2 ; V ; R3
  R3
)

testlyapchol=: 3 : 0
  A=. 4 4 $ _1 _1 2 2 37 _10 _4 _2 _12 0 7 7 _12 4 _6 _9
  B=. 4 4 $ 2 2 4 5 0 8 7 7 0 0 2 6 0 0 0 2
  X=. 4 4 $ 18.3023846590474 43.8883259794941 75.7212100367117 _56.8758547174409 43.8883259794941 139.292151950139 128.468952844055 _100.964634818162 75.7212100367117 128.468952844055 492.482132895331 _365.531487118111 _56.8758547174409 _100.964634818162 _365.531487118111 274.871182227256
  U=. |. |."1 dpotrf_jlapack_ |. |. "1 X	NB. find upper triangular Cholesky factor, X=U*U'
  u=. A lyapchol B
  x=. u mp h u
  2 10 $ 'A' ; 'B' ; 'X' ; 'U' ; 'X-UU''' ; 'AX+XA''+BB''' ; 'solution: u' ; 'x=u*u''' ; 'Ax+xA''+BB''' ; 'U-u' ; A ; B ; X ; U ; (X - U mp h U) ; ((A mp X) + (X mp h A) + (B mp h B)) ; u ; x ; ((A mp x) + (x mp h A) + (B mp h B)) ; (U-u)
  U -: u
)

NB. Solve reduced stable continuous-time Luapunov equation
NB. R*P + P*R' + B*B' = 0 directly for Cholesky factor U, P = U*U',
NB. by modified Hammarling's method using complex arithmetic
NB.
NB. Usage:
NB.   U=. R sorzhou B
NB. where:
NB.   R - N-by-N complex or real upper triangular matrix. Must be stable,
NB.       i.e. all eigenvalues of R must have negative real parts
NB.   B - N-by-M complex or real matrix
NB.   U - N-by-N complex or real upper triangular matrix
NB.
NB. Reference:
NB.   Danny C. Sorensen and Yunkai Zhou, "Direct methods for matrix
NB.   Sylvester and Lyapunov equations", J. Appl. Math, vol. 2003, no. 6,
NB.   pp. 277-303, 2003. doi:10.1155/S1110757X03212055

sorzhou=: 4 : 0
  assert. 2 = # $ x                   NB. R is table (rank-2 array)
  assert. =/ $ x                      NB. R is squared
  n=. # x
  assert. 2 = # $ y                   NB. B is table (rank-2 array)
  assert. n = # y                     NB. R and B must match in length
  U=. (2 $ n) $ 0
  ij=. i. n
  for_j. |. }. ij do.
    ij=. }: ij
    jj=. 2 $ j
    bh=. j { y
    mu=. N2 bh
    mu1=. %: _2 * 9 o. (< jj) { x
    if. mu > 0 do.
      B1=. j {. y
      R1=. jj {. x
      bh=. bh % mu
      atmp=. (((+ (< jj) { x)) + (<0 1) |: R1) (;/ ,.~ ij) } R1
  NB. form "R1+conj(lambda)*I" by adding conj(lambda) to R1 diagonal
      btmp=. ,. (, B1 mp (+ bh * - mu1)) + ((<ij;j) { x) * mu % - mu1
  NB. form "-tau*r-(1/tau)*B1*b"
      u=. , atmp zgesv_jlapack_ btmp         NB. solve for u complex system atmp * u = btmp
      y=. (B1 - u */ (bh * mu1)) ij } y      NB. subtract outer product from B1
      U=. (u,(mu%mu1)) (<(ij,j);j) } U       NB. replace leading j+1 elements in j-th column
    end.
  end.
  U=. ((N2 {. y) % (%: _2 * 9 o. (< 0 0) { x)) (< 0 0) } U
)

testsorzhou=: 3 : 0
  A=. 4 4 $ _4.72079j6.88157 1.85282j_6.23607 _9.32345j_10.4931 _25.6918j_3.69007 0 _4.72079j_6.88157 7.98127j18.8472 _2.87135j22.6863 0 0 _0.228549 3.56454 0 0 0 _3.32986
  B=. 4 4 $ _0.698404 1.95195j_3.28169 _0.157623j0.358835 8.3951j_0.623912 0 _4.34947 _0.393643j_0.303149 2.7418j_5.29144 0 0 _2.40179 5.6136 0 0 0 _8.77209
  X=. 4 4 $ 485.99042259114 197.055471519197j_273.862645425428 112.880259791399j_86.1895154814125 _10.7165069563653j_13.8191525853448 197.055471519197j273.862645425428 381.154726490002 113.555611283896j19.0639449822549 10.9069050008712j23.7019437664547 112.880259791399j86.1895154814125 113.555611283896j_19.0639449822549 46.2482493730121 _2.2641201433169 _10.7165069563653j13.8191525853448 10.9069050008712j_23.7019437664547 _2.2641201433169 11.5544532776128
  U=. |. |."1 zpotrf_jlapack_ |. |. "1 X
  u=. A sorzhou B
  x=. u mp h u
  smoutput 2 10 $ 'A' ; 'B' ; 'X' ; 'U' ; 'X-UU''' ; 'AX+XA''+BB''' ; 'solution: u' ; 'x=u*u''' ; 'Ax+xA''+BB''' ; 'U-u' ; A ; B ; X ; U ; (X - U mp h U) ; ((A mp X) + (X mp h A) + (B mp h B)) ; u ; x ; ((A mp x) + (x mp h A) + (B mp h B)) ; (U-u)
  U -: u
)


f=: 3 : 0
  NB. aligned ok
  if. y do.
    y=. y     NB. code is aligned ok
  NB. should be 2 spaces to right
  end.
)
