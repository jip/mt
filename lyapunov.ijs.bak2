NB. lyapunov.ijs
NB. solve Luapunov equation
NB.
NB. lyapchol  - solve continuous-time Lyapunov equation
NB.             directly for Cholesky factor
NB. dlyapchol - solve discrete-time Lyapunov equation
NB.             directly for Cholesky factor
NB. lyap      - solve continuous-time Lyapunov equation
NB. dlyap     - solve discrete-time Lyapunov equation
NB.
NB. TODO
NB. - replace some of assert. by throw.
NB. - handle non-squared case
NB. - implement enhanced LAPACK interfaces
NB. - CO2DI: Cayley transform
NB.
NB. 2007-12-25 1.0.0 Igor Zhuravlov

require '~system/packages/math/matutil.ijs'     NB. diag
require '~user/projects/jlapack/lapack.ijs'     NB. '~addons/math/lapack/lapack.ijs'
require '~user/projects/jlapack/dgerqf.ijs'     NB. -//-
require '~user/projects/jlapack/dpotrf.ijs'     NB. -//- (+)
require '~user/projects/jlapack/zgees.ijs'      NB. -//-
require '~user/projects/jlapack/zgeev.ijs'      NB. -//-
require '~user/projects/jlapack/zgerqf.ijs'     NB. -//-
require '~user/projects/jlapack/zpotrf.ijs'     NB. -//-
require '~user/projects/jlapack/ztrtrs.ijs'     NB. -//-

NB. ===========================================================================
NB. lyapchol
NB. solve stable non-negative definite continuous-time Lyapunov equation
NB. A*X + X*A' + B*B' = 0 directly for Cholesky factor U, X = U*U'
NB.
NB. Usage:
NB.   U=. A lyapchol B
NB.   U=. (R;Q) lyapchol B
NB. where:
NB.   A   - N-by-N stable matrix, i.e. all eigenvalues of A must
NB.         have negative real parts
NB.   R,Q - N-by-N matrices from Schur factorization: Q*R*Q' = A
NB.   B   - N-by-M matrix
NB.   U   - N-by-N upper triangular matrix
NB.   N   > 0
NB.   M   > 0
NB.
NB. Solution must exist and be unique, i.e. vectors eigenvalue(A) and
NB.   eigenvalue(B) have not to have common values
NB.
NB. Reference:
NB.   Solution of stable continuous- or discrete-time Lyapunov equations
NB.   (Cholesky factor), URL: http://www.slicot.org/shared/doc/SB03OD.html

lyapchol=: 4 : 0
  n=. # y
  assert. 2 = # $ y                         NB. B is table (rank-2 array) (FIXME - vector allowed)
  if. L. x do.
    'Q R'=. x                               NB. Schur factorization Q*R*Q' = A
    vsquare_jlapack_ Q
    assert. n = # Q
    assert. Q (-: &: $) R                   NB. R and Q shapes are match
  else.
    vsquare_jlapack_ x
    assert. n = # x
    'Q R'=. 2 {. zgees_jlapack_ x           NB. Schur factorization Q*R*Q' = A
  end.
  smoutput 2 3 $ 'Q' ; 'R' ; 'A-QRQ''' ; Q ; R ; (x - Q mp R mp h Q)
  evA=. diag R                              NB. eigenvalues(A)
  evB=. 1 {:: zgeev_jlapack_ y              NB. eigenvalues(B)
  assert. -. 0 e. 0 > 9 o. evA              NB. A is stable
  assert. evA (*:/ @: (e. , e.~)) evB       NB. solution exists and is unique
  smoutput 2 2 $ 'eig(A)' ; 'eig(B)' ; (,. evA) ; (,. evB)
  R1=. zgerqfR y                            NB. RQ factorization R1*P1=B
  R2=. zgerqfR (h Q) mp R1                  NB. RQ factorization R2*P2=Q'*R1

  NB. solve triangular Luapunov equation directly for Cholesky factor V
  V=. 1 {:: R (sorzhouiter ^: n) R2 ; ((2 $ n) $ 0) ; (i. n)

  R3=. zgerqfR Q mp V                       NB. RQ factorization R3*P3=Q*V
  R3=. (*"1 * @: diag) R3                   NB. negate columns having negative diagonal elements (apropos they are real)
  smoutput 2 6 $ 'Q' ; 'R' ; 'R1' ; 'R2' ; 'V' ; 'R3' ; Q ; R ; R1 ; R2 ; V ; R3
  R3
)

NB. ===========================================================================
NB. sorzhouiter
NB. execute single iteration # (n-j) of Sorensen-Zhou algorithm
NB.
NB. Usage:
NB.   'Bupd Uupd ijupd'=. R sorzhouiter B ; U ; ij
NB. where:
NB.   R     - N-by-N upper triangular stable matrix, i.e. all eigenvalues of R
NB.           must have negative real parts
NB.   B     - N-by-M matrix, updated at step #j
NB.   U     - N-by-N upper triangular matrix with all but first j columns
NB.           updated
NB.   ij    - i. j
NB.   Bupd  - (N-1)-by-M matrix B without last row and updated after step #j
NB.   Uupd  - N-by-N matrix U with updated column #j
NB.   ijupd - }: ij
NB.   N     > 0
NB.   M     > 0
NB.
NB. Reference:
NB.   Danny C. Sorensen and Yunkai Zhou, "Direct methods for matrix
NB.   Sylvester and Lyapunov equations", J. Appl. Math, vol. 2003, no. 6,
NB.   pp. 277-303, 2003. doi:10.1155/S1110757X03212055

sorzhouiter=: 4 : 0
  'B1 bh'=. (}:;{:) 0 {:: y     NB. split at last row (bh)
  'ij j'=. (}:;{:) 2 {:: y      NB. split at last atom (j)
  jj=. 2 $ j                    NB. IO: lambda in R, tau in U, R1 in R
  ijj=. <ij;j                   NB. IO: r in R, u in U
  lambda=. (< jj) { x
  tau=. (N2 bh) % (%: _2 * 9 o. lambda)
  bh=. bh % tau
  chk=. (0 < # B1) *. (0 < tau)
  if. chk do.
    R1=. jj {. x
    atmp=. (lambda shiftdiag R1) (iosdiag ij) } R1      NB. R1+conj(lambda)*I
    btmp=. (B1 mp (+ - bh)) + (ijj { x) * - tau         NB. -tau*r-(1/tau)*B1*b
    u=. , ztrtrs_jlapack_ atmp ; ,. btmp                NB. solve for u complex upper triangular system atmp * u = btmp
  else.
    u=. j $ 0
  end.

  NB. update B1 if needed
  NB. replace in U leading j elements in j-th column if needed
  NB. replace (j+1)-th diagonal element in U
  ((- & (u */ bh))^:chk B1) ; (tau (< jj) } u (ijj })^:chk 1 {:: y) ; ij
)

NB. ===========================================================================
NB. dlyapchol - solve convergent non-negative definite discrete-time Lyapunov
NB.             equation A*X*A' + X + B*B' = 0 directly for Cholesky factor

NB. ===========================================================================
NB. lyap      - solve continuous-time Lyapunov equation A*X + X*A' + B*B' = 0

NB. ===========================================================================
NB. dlyap     - solve discrete-time Lyapunov equation A*X*A' + X + B*B' = 0

NB. ===========================================================================
NB. utilities

N2=: [: %: [: +/ [: *: |                NB. 2-norm of vector
h=: +@|:                                NB. conjugate transpose of table
zgerqfR=: 0 {:: zgerqf_jlapack_         NB. take R from RQ factorization
shiftdiag=: (+ @ [) + (diag @: ])       NB. conjugate(x)+diag(y)
iosdiag=: <"1 @ ,.~                     NB. indices of y-th diagonal elements

NB. ===========================================================================
NB. test matrices

testlyapchol=: 3 : 0
  A=. 4 4 $ _1 _1 2 2 37 _10 _4 _2 _12 0 7 7 _12 4 _6 _9
  B=. 4 4 $ 2 2 4 5 0 8 7 7 0 0 2 6 0 0 0 2
  X=. 4 4 $ 18.3023846590474 43.8883259794941 75.7212100367117 _56.8758547174409 43.8883259794941 139.292151950139 128.468952844055 _100.964634818162 75.7212100367117 128.468952844055 492.482132895331 _365.531487118111 _56.8758547174409 _100.964634818162 _365.531487118111 274.871182227256
  U=: |. |."1 dpotrf_jlapack_ |. |. "1 X        NB. upper triangular Cholesky factor U, X=U*U'
  u=: A lyapchol B
  x=. u mp h u
  smoutput 2 10 $ 'A' ; 'B' ; 'X' ; 'U' ; 'X-UU''' ; 'AX+XA''+BB''' ; 'solution: u' ; 'x=u*u''' ; 'Ax+xA''+BB''' ; 'U-u' ; A ; B ; X ; U ; (X - U mp h U) ; ((A mp X) + (X mp h A) + (B mp h B)) ; u ; x ; ((A mp x) + (x mp h A) + (B mp h B)) ; (U-u)
  U (-: !. 1e_11) u
)

NB. testsorzhou=: 3 : 0
NB.   A=. 4 4 $ _4.72079j6.88157 1.85282j_6.23607 _9.32345j_10.4931 _25.6918j_3.69007 0 _4.72079j_6.88157 7.98127j18.8472 _2.87135j22.6863 0 0 _0.228549 3.56454 0 0 0 _3.32986
NB.   B=. 4 4 $ _0.698404 1.95195j_3.28169 _0.157623j0.358835 8.3951j_0.623912 0 _4.34947 _0.393643j_0.303149 2.7418j_5.29144 0 0 _2.40179 5.6136 0 0 0 _8.77209
NB.   X=. 4 4 $ 485.99042259114 197.055471519197j_273.862645425428 112.880259791399j_86.1895154814125 _10.7165069563653j_13.8191525853448 197.055471519197j273.862645425428 381.154726490002 113.555611283896j19.0639449822549 10.9069050008712j23.7019437664547 112.880259791399j86.1895154814125 113.555611283896j_19.0639449822549 46.2482493730121 _2.2641201433169 _10.7165069563653j13.8191525853448 10.9069050008712j_23.7019437664547 _2.2641201433169 11.5544532776128
NB.   U=. |. |."1 zpotrf_jlapack_ |. |. "1 X
NB.   u=. A sorzhou B
NB.   x=. u mp h u
NB.   smoutput 2 10 $ 'A' ; 'B' ; 'X' ; 'U' ; 'X-UU''' ; 'AX+XA''+BB''' ; 'solution: u' ; 'x=u*u''' ; 'Ax+xA''+BB''' ; 'U-u' ; A ; B ; X ; U ; (X - U mp h U) ; ((A mp X) + (X mp h A) + (B mp h B)) ; u ; x ; ((A mp x) + (x mp h A) + (B mp h B)) ; (U-u)
NB.   U - u
NB. )
